from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoAlertPresentException
import time
from datetime import datetime
import pickle  # 파일 저장 및 불러오기를 위해 필요
import tkinter as tk
from tkinter import ttk
import tkinter.filedialog as filedialog
import threading
import pandas as pd
from tkinter import PhotoImage
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from bs4 import BeautifulSoup
import re
import pyperclip
import random
from ppadb.client import Client as AdbClient
import tkinter.messagebox as messagebox
from selenium import webdriver
import webbrowser


def main():
    global login_tree, account_dict  # Declare them globally if they're not part of a class

    # Tkinter 창 설정
    root = tk.Tk()
    root.title("카페 댓글 프로그램")
    root.geometry("500x900")  # 전체 창 크기 조정
    
    # 전체 창을 가로로 나누는 PanedWindow 설정
    paned_window = tk.PanedWindow(root, orient=tk.HORIZONTAL)
    paned_window.pack(fill=tk.BOTH, expand=True)

    frame_left = tk.Frame(paned_window)
    paned_window.add(frame_left, width=200)

    login_frame = ttk.LabelFrame(frame_left, text="아이디 입력")
    login_frame.pack(fill=tk.X, padx=10, pady=5)

    text_frame =tk.Frame(login_frame)
    text_frame.pack()

    def on_entry_click(event, placeholder):
        """Entry 위젯 클릭 시 실행되는 이벤트 핸들러"""
        if event.widget.get() == placeholder:
            event.widget.delete(0, "end")
            event.widget.insert(0, '')
            event.widget.config(fg='black')

    def on_focusout(event, placeholder):
        """Entry 위젯 포커스가 사라졌을 때 실행되는 이벤트 핸들러"""
        if event.widget.get() == '':
            event.widget.insert(0, placeholder)
            event.widget.config(fg='grey')

    def add_placeholder_to(entry, placeholder):
        """Entry 위젯에 플레이스홀더를 추가하는 함수"""
        entry.insert(0, placeholder)
        entry.config(fg='grey')
        entry.bind("<FocusIn>", lambda event, placeholder=placeholder: on_entry_click(event, placeholder))
        entry.bind("<FocusOut>", lambda event, placeholder=placeholder: on_focusout(event, placeholder))

    id_entry = tk.Entry(text_frame, width=15)
    id_entry.pack(side="left", padx=5, pady=5)
    add_placeholder_to(id_entry, "아이디")

    pw_entry = tk.Entry(text_frame, width=15)
    pw_entry.pack(side="left", padx=5, pady=5)
    add_placeholder_to(pw_entry, "비밀번호")

    account_dict = {}  # Initialize the dictionary
    def read_login_file():
        global account_dict, login_tree  
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            with open(file_path, 'r', encoding='utf-8') as file:
                # 트리뷰 초기화
                for item in login_tree.get_children():
                    login_tree.delete(item)

                account_dict.clear()  # 계정 딕셔너리 초기화

                # 파일 내용을 읽어와 트리뷰에 아이디 추가
                for line_number, line in enumerate(file, start=1):
                    line = line.strip()
                    if line:
                        parts = line.split(',')  # 쉼표로 구분
                        if len(parts) >= 2:
                            id_part = parts[0]  # 아이디 부분
                            pw_part = parts[1]  # 비밀번호 부분
                            login_tree.insert("", "end", values=(line_number, id_part, pw_part))  # 트리뷰에 아이디 추가
                            account_dict[id_part] = pw_part  # 계정 딕셔너리에 저장
    file_button = tk.Button(text_frame, text="파일", command=read_login_file)
    file_button.pack(side="left", padx=5)

    tree_frame = ttk.Frame(login_frame)
    tree_frame.pack(fill=tk.BOTH, padx=10, pady=10, expand=True)


    columns = ('번호', '아이디', '비밀번호', '검증')
    login_tree = ttk.Treeview(tree_frame, columns=columns, show='headings')
    login_tree.pack(side="left", fill=tk.BOTH, expand=True, padx=15, pady=15)

    for col in columns:
        login_tree.heading(col, text=col)
        if col in ("번호", "검증"):
            login_tree.column(col, width=10)
        else:
            login_tree.column(col, width=80)

    scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=login_tree.yview)
    scrollbar.pack(side="right", fill="y")
    login_tree.configure(yscrollcommand=scrollbar.set)

    def update_all_rows_with_entry_values():
        my_id = id_entry.get() if id_entry.get() != "아이디" else ""
        my_pw = pw_entry.get() if pw_entry.get() != "비밀번호" else ""
        
        existing_rows = login_tree.get_children()
        next_line_number = len(existing_rows) + 1

        # Insert the new row at the end of the Treeview
        login_tree.insert("", "end", values=(next_line_number, my_id, my_pw, ""))

            
    upload_button = tk.Button(text_frame, text="추가", command=update_all_rows_with_entry_values)
    upload_button.pack(side="left", padx=5)

    option_frame = tk.Frame(login_frame)  # Changed the parent to frame_left
    option_frame.pack(fill=tk.X, padx=10, pady=10)  # Packing it after the Treeview



    def confirm():
        def verify_logins():
            for item in login_tree.get_children():
                # Extract the ID and password values from the treeview item
                row_values = login_tree.item(item, 'values')
                user_id = row_values[1]  # Assuming the ID is in the second column
                user_pw = row_values[2]  # Assuming the password is in the third column

                # Perform your login verification logic here
                # For now, let's assume a function called `verify_login` that returns True or False
                login_success = verify_login(user_id, user_pw)

                # Update the '검증' column based on the login success
                verification_status = 'O' if login_success else 'X'
                login_tree.set(item, "#4", verification_status)  # Assuming the '검증' column is the fourth column
            print_to_textbox("검증이 완료되었습니다.")
        # 별도의 스레드에서 로그인 검증을 시작
        thread = threading.Thread(target=verify_logins)
        thread.start()

    
    def setup_chrome_driver():
        driver_path = "C:\Program Files\Google\Chrome\Application\chrome.exe"
        options = webdriver.ChromeOptions()
        options.add_argument('user-agent=Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36')

        driver = webdriver.Chrome(options=options)
        return driver

    def verify_login(naver_id, naver_pw):
        try:
            driver = webdriver.Chrome()  # 웹드라이버 초기화
            login_url = "https://nid.naver.com/nidlogin.login"
            
            driver.get(login_url)
            time.sleep(1)
            # 로그인 메커니즘 구현
            switch_btn = driver.find_element(By.CSS_SELECTOR, ".switch_btn")
            switch_status = driver.find_element(By.CSS_SELECTOR, ".switch_btn .blind").text

            if switch_status.lower() == "on":
                switch_btn.click()
            time.sleep(0.5)

            id_selector = "#id"
            pw_selector = "#pw"
            login_btn_selector = "#log\\.login"
            id_input = driver.find_element(By.CSS_SELECTOR, id_selector)
            pw_input = driver.find_element(By.CSS_SELECTOR, pw_selector)
            login_btn = driver.find_element(By.CSS_SELECTOR, login_btn_selector)
            id_input.click()
            pyperclip.copy(naver_id)
            ActionChains(driver).key_down(Keys.CONTROL).send_keys("v").key_up(Keys.CONTROL).perform()
            pw_input.click()
            pyperclip.copy(naver_pw)
            ActionChains(driver).key_down(Keys.CONTROL).send_keys("v").key_up(Keys.CONTROL).perform()
            login_btn.click()
            time.sleep(1)    

            try:
                driver.find_element(By.ID, "new.dontsave").click()
                time.sleep(0.5)
            except NoSuchElementException:
                pass

            driver.find_element(By.CSS_SELECTOR, ".MyView-module__btn_logout___bsTOJ")
            return True  # 로그아웃 버튼이 있으면 로그인 성공
        except Exception as e:
            return False
        finally:
            driver.quit()  # 드라이버 종료
        

    confirm_button = tk.Button(option_frame, text="검증", command=confirm, width=7, height=2)
    confirm_button.pack(side="right", padx=5)
    spacer_frame_1 = tk.Frame(option_frame, width=20, height=10)
    spacer_frame_1.pack(side="right", padx=5)
    # 모든 행을 삭제하는 함수
    def all_delete_selected_item():
        for item in login_tree.get_children():
            # 각 항목을 삭제합니다.
            login_tree.delete(item)

    # 삭제 버튼 생성 및 이벤트 연결
    all_delete_button = tk.Button(option_frame, text="전체삭제", command=all_delete_selected_item)
    all_delete_button.pack(side="right", padx=5)
    # 선택된 행을 삭제하는 함수
    def delete_selected_item():
        selected_items = login_tree.selection()  # 현재 선택된 모든 행의 ID
        for selected_item in selected_items:
            login_tree.delete(selected_item)
        
        # 행 삭제 후 행 번호 재정렬
        for index, item in enumerate(login_tree.get_children(), start=1):
            login_tree.set(item, '#1', str(index))  # 첫 번째 열('#1')을 새로운 순서 번호로 업데이트


    # 삭제 버튼 생성 및 이벤트 연결
    delete_button = tk.Button(option_frame, text="삭제", command=delete_selected_item)
    delete_button.pack(side="right", padx=5)
    # 삭제 및 전체삭제 버튼 사이의 공백을 위한 빈 Frame 생성
    spacer_frame_1 = tk.Frame(option_frame, width=20, height=10)
    spacer_frame_1.pack(side="right", padx=5, expand=True)

    #파일 넣기
    start_frame = ttk.LabelFrame(frame_left, text="댓글 셋팅")
    start_frame.pack(fill=tk.X, padx=10, pady=5)


    def load_comment_contents():
        file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if file_path:
            review_file_path.set(file_path)  # Ensure this is a string
            comment_contents_label.config(text=file_path)
        pass

    review_file_path = tk.StringVar()

    comment_contents_button = tk.Button(start_frame, text="댓글 불러오기", command=load_comment_contents, width=20, height=2)
    comment_contents_button.pack(side=tk.TOP, expand=True, pady=10)
    comment_contents_label = tk.Label(start_frame, text="선택된 폴더 없음")
    comment_contents_label.pack()

    #댓글갯수
    # 댓글 개수를 위한 StringVar 객체 생성
    comment_count_var = tk.StringVar()

    # 댓글 개수 입력을 위한 엔트리 박스 추가
    comment_count_frame = tk.Frame(start_frame)
    comment_count_frame.pack(pady=5)

    tk.Label(comment_count_frame, text="댓글 개수:").pack(side=tk.LEFT)
    comment_count_entry = tk.Entry(comment_count_frame, textvariable=comment_count_var)
    comment_count_entry.pack(side=tk.LEFT, expand=True, padx=5)

    # 댓글 개수 입력 엔트리에 플레이스홀더 추가
    add_placeholder_to(comment_count_entry, "예: 5")

    # 체크박스 상태를 저장할 변수
    tethering_var = tk.IntVar()

    # 체크박스 추가
    tethering_checkbox = tk.Checkbutton(start_frame, text="자동 테더링모드", variable=tethering_var)
    tethering_checkbox.pack(pady=5)


    # 실행 버튼의 콜백 함수 수정
    def start_execution():
        review_path = review_file_path.get()  # 댓글 파일 경로
            
        if not review_path:
            messagebox.showwarning("확인 요청", "파일을 불러오고 다시 시도하세요.")
            return  # 함수 실행 중지
        try:
            comment_count = int(comment_count_var.get())  # 사용자가 입력한 댓글 개수
        except ValueError:
            comment_count = 5  # 기본값 설정
        

        def thread_function():
            # 선택된 모든 행에 대해 작업을 수행
            for row_id in login_tree.get_children():
                row_data = login_tree.item(row_id, 'values')
                verification_status = row_data[3]  # '검증' 상태는 네 번째 열에 위치

                # '검증' 상태가 'O'인 경우에만 로그인 로직 실행
                if verification_status == 'O':
                    user_id = row_data[1]  # 아이디는 두 번째 열에 위치
                    user_pw = row_data[2]  # 비밀번호는 세 번째 열에 위치
                    
                    driver = setup_chrome_driver()  # 이 부분을 추가        
                    login_url = "https://nid.naver.com/nidlogin.login"
                    driver.get(login_url)
                    time.sleep(random.uniform(1, 2))

                    switch_btn = driver.find_element(By.CSS_SELECTOR, ".switch_btn")
                    switch_status = driver.find_element(By.CSS_SELECTOR, ".switch_btn .blind").text

                    if switch_status.lower() == "on":
                        switch_btn.click()
                    time.sleep(random.uniform(0.5, 1))

                    id_selector = "#id"
                    pw_selector = "#pw"
                    login_btn_selector = "#log\\.login"
                    id_input = driver.find_element(By.CSS_SELECTOR, id_selector)
                    pw_input = driver.find_element(By.CSS_SELECTOR, pw_selector)
                    login_btn = driver.find_element(By.CSS_SELECTOR, login_btn_selector)
                    id_input.click()
                    pyperclip.copy(user_id)
                    ActionChains(driver).key_down(Keys.CONTROL).send_keys("v").key_up(Keys.CONTROL).perform()
                    pw_input.click()
                    pyperclip.copy(user_pw)
                    ActionChains(driver).key_down(Keys.CONTROL).send_keys("v").key_up(Keys.CONTROL).perform()
                    login_btn.click()
                    time.sleep(random.uniform(1, 2))

                    try:
                        driver.find_element(By.ID, "new.dontsave").click()
                        time.sleep(random.uniform(0.5, 1))
                    except NoSuchElementException:
                        pass

                    # 로그인 후의 로직, 예를 들어 댓글 작성 로직을 여기에 구현합니다.
                    
                    try:
                        post_url = "https://section.cafe.naver.com/ca-fe/home/feed"
                        driver.get(post_url)
                        WebDriverWait(driver, 3).until(EC.presence_of_element_located((By.CSS_SELECTOR, "a.comment")))  # 댓글 버튼이 로드될 때까지 대기
                        # 요소가 존재하면 수행할 작업
                    except TimeoutException:
                        # "a.comment" 요소가 로드되지 않는 경우 수행할 작업
                        print_to_textbox(f"{user_id} 계정의 구독된 댓글이 없습니다. 다음 계정으로 이동합니다.")
                        driver.quit()  # 작업 완료 후 웹드라이버 종료
                        continue  # 다음 계정으로 넘어가기 위해 현재 반복을 종료하고 다음 반복으로 넘어감

                    
                    # 게시글 링크 저장을 위한 리스트
                    all_post_links = []
                    # 현재 문서 높이
                    last_height = driver.execute_script("return document.body.scrollHeight")

                    while True:
                        
                        # 페이지의 HTML 가져오기 및 파싱
                        page_html = driver.page_source
                        soup = BeautifulSoup(page_html, 'html.parser')

                        # 모든 게시글 링크 추출
                        post_links = [post.find('a')['href'] for post in soup.find_all('div', class_='feed_content') if post.find('a')]
                        
                        # 중복 링크를 제거하고 저장
                        for link in post_links:
                            if link not in all_post_links:
                                all_post_links.append(link)
                        

                        # 수집된 게시글 링크가 comment_count 이상이면 중단
                        if len(all_post_links) > comment_count:
                            break
                        # 스크롤 다운하여 새 게시글 로딩 유도
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                        time.sleep(1)
                        
                        # 스크롤 후의 문서 높이
                        new_height = driver.execute_script("return document.body.scrollHeight")
                        if new_height == last_height:
                            # 더 이상 내릴 페이지가 없음
                            break
                        last_height = new_height
                    if len(all_post_links) < comment_count:
                        print_to_textbox(f"{user_id} 계정은 최대 댓글 수 {len(all_post_links)} 개 작성합니다.")
                        
                    comment_count_posted = 0
                    for link in all_post_links[:comment_count]:
                        
                        driver.execute_script("window.open(arguments[0]);", link)
                        driver.switch_to.window(driver.window_handles[1])
                        time.sleep(random.uniform(1, 2))
                        
                
                        driver.switch_to.frame("cafe_main")
                        try:
                            # "댓글 달기 불가" 버튼을 찾습니다. 요소가 없으면 NoSuchElementException 예외가 발생합니다.
                            driver.find_element(By.CSS_SELECTOR, "a.button_comment.not_allowed")
                            time.sleep(random.uniform(1, 2))
                            print_to_textbox(f"'{cafe_name}' 카페에서 글쓰기 권한이 없습니다. 다음 카페로 이동합니다.")
                            driver.close()  # 현재 탭 닫기
                            time.sleep(random.uniform(1, 2))
                            driver.switch_to.window(driver.window_handles[0])  # 원래 탭으로 전환
                            
                            continue
                        except NoSuchElementException:
                            pass


                        # 중복 검사 및 댓글 데이터 수집
                        html = driver.page_source
                        soup = BeautifulSoup(html, 'html.parser')
                        comments = soup.find_all('li', class_='CommentItem')
                        title_raw = soup.select_one('.title_area .title_text').get_text(strip=True)
                        title = re.sub(r'[^\w\s]', '', title_raw)  # 비문자-숫자 및 공백을 제외한 모든 문자 제거
                            
                        is_duplicate = False

                        for comment in comments:
                            try:
                                login_nickname_element = WebDriverWait(driver, 10).until(
                                    EC.presence_of_element_located((By.CSS_SELECTOR, "em.comment_inbox_name"))
                                )
                                login_nickname = login_nickname_element.text.strip()  # 사용자 닉네임 추출
                                nickname = comment.find('a', class_='comment_nickname').text.strip()
                                # 로그인한 사용자가 작성한 댓글 중 파일 목록에 있는 댓글이면 중복으로 판단
                                if nickname == login_nickname:
                                    is_duplicate = True
                                    print_to_textbox(f"계정: {user_id} - 제목: {title} (댓글 중복)")                            
                                    break  # 중복된 댓글을 찾으면 더 이상 검사하지 않고 반복문 탈출
                            except AttributeError:
                                continue  # 해당 요소가 없으면 건너뛰기

                        #is_duplicate = any(is_duplicate_comment(login_nickname, comment_text, file_comments_list) for comment in existing_comments)
                        if is_duplicate:
                            driver.close()  # 현재 탭 닫기
                            driver.switch_to.window(driver.window_handles[0])  # 원래 탭으로 전환
                            continue

                        time.sleep(random.uniform(1, 2))
                        try:
                            comment_input_box = WebDriverWait(driver, 2).until(
                                EC.presence_of_element_located((By.CSS_SELECTOR, "textarea.comment_inbox_text"))
                            )
                            driver.execute_script("arguments[0].scrollIntoView(true);", comment_input_box)  # 요소가 보이도록 스크롤
                            time.sleep(random.uniform(1, 2))  # 스크롤 후 잠시 대기
                            # 댓글 입력 상자에 텍스트 입력
                            comment_input_box.click()  # 댓글 입력 상자 클릭
                            time.sleep(random.uniform(1, 2))
                        except (NoSuchElementException, TimeoutException):
                            driver.close()  # 현재 탭 닫기
                            driver.switch_to.window(driver.window_handles[0])  # 원래 탭으로 전환
                            continue
                        
                        # 댓글 입력 및 제출
                        comment_input_box.clear()  # 기존 텍스트 제거
                        # 댓글 내용을 불러오기
                        review_comments = []
                        with open(review_path, 'r', encoding='utf-8') as file:
                            review_comments = file.readlines()
                        random_comment = random.choice(review_comments)  # review_comments 리스트에서 랜덤하게 하나의 댓글 선택
                        comment_input_box.send_keys(random_comment)  # 선택된 댓글을 입력 필드에 전송
                        
                        
                        submit_button = WebDriverWait(driver, 2).until(
                            EC.element_to_be_clickable((By.CSS_SELECTOR, "a.btn_register"))
                        )
                        submit_button.click()
                        
                        time.sleep(random.uniform(1, 2))  # 적당한 시간 지연
                        driver.close()  # 현재 탭 닫기
                        driver.switch_to.window(driver.window_handles[0])  # 원래 탭으로 전환
                        comment_count_posted += 1
                        print_to_textbox(f"계정: {user_id} - 제목: {title} - 링크: {link} (댓글 작성: {comment_count_posted})")                        
                    
                driver.quit()  # 작업 완료 후 웹드라이버 종료

            print_to_textbox("작업 완료")
        
        thread = threading.Thread(target=thread_function)
        thread.start()

    action_button = tk.Button(start_frame, text="실행", command=start_execution, width=20, height=2)
    action_button.pack(side=tk.TOP, expand=True)
    
    
    def print_to_textbox(message):
        text_area.insert(tk.END, message + "\n")
        text_area.see(tk.END)  # 스크롤 자동 이동
    
    text_frame = ttk.LabelFrame(frame_left, text="작업내역")
    text_frame.pack(fill=tk.BOTH, padx=10, pady=10,expand=True)


    # 텍스트 창 추가
    text_area = tk.Text(text_frame, height=5)  # 텍스트 창의 높이 설정
    text_area.pack(fill=tk.BOTH, padx=10, pady=10, expand=True)
    tk.Label(frame_left).pack()

    
    root.mainloop()

if __name__ == "__main__":
    main()
